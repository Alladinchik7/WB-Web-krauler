// internal/GetNodes/getNodes.go
package getNodes

import (
	"context"
	"log"
	"time"

	"github.com/chromedp/cdproto/cdp"
	"github.com/chromedp/chromedp"
)

func GetNodesWithScroll(nodes *[]*cdp.Node) chromedp.Tasks {
	return chromedp.Tasks{
		chromedp.ActionFunc(func(ctx context.Context) error {
			return collectNodesWithScroll(ctx, nodes)
		}),
	}
}

func collectNodesWithScroll(ctx context.Context, nodes *[]*cdp.Node) error {
	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —É–∑–ª—ã
	productSelectors := []string{
		`.product-card`,
		`.j-card-item`, 
		`div[data-nm-id]`,
	}
	
	var allNodes []*cdp.Node
	var workingSelector string
	
	// –ù–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—á–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
	for _, selector := range productSelectors {
		var currentNodes []*cdp.Node
		err := chromedp.Nodes(selector, &currentNodes, chromedp.ByQueryAll).Do(ctx)
		if err == nil && len(currentNodes) > 0 {
			log.Printf("‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä %s –Ω–∞—à–µ–ª %d —Ç–æ–≤–∞—Ä–æ–≤", selector, len(currentNodes))
			allNodes = currentNodes
			workingSelector = selector
			break
		}
	}
	
	if len(allNodes) == 0 {
		log.Println("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤")
		*nodes = allNodes
		return nil
	}
	
	log.Printf("–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: %d", len(allNodes))
	
	// –°–∫—Ä–æ–ª–ª–∏–º —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
	for i := 0; i < 3; i++ { // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
		log.Printf("–°–∫—Ä–æ–ª–ª–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É... (–ø–æ–ø—ã—Ç–∫–∞ %d/3)", i+1)
		
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º chromedp.ScrollIntoView –≤–º–µ—Å—Ç–æ Evaluate
		err := chromedp.Run(ctx,
			// –°–∫—Ä–æ–ª–ª–∏–º –∫ –Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			chromedp.EvaluateAsDevTools(`window.scrollTo(0, document.body.scrollHeight)`, nil),
			// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
			chromedp.Sleep(2*time.Second),
		)
		
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ: %v", err)
			break
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
		var newNodes []*cdp.Node
		err = chromedp.Nodes(workingSelector, &newNodes, chromedp.ByQueryAll).Do(ctx)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —É–∑–ª–æ–≤ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞: %v", err)
			break
		}
		
		log.Printf("–ü–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞ #%d: –≤—Å–µ–≥–æ %d —Ç–æ–≤–∞—Ä–æ–≤", i+1, len(newNodes))
		
		if len(newNodes) > len(allNodes) {
			log.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: %d", len(newNodes)-len(allNodes))
			allNodes = newNodes
		} else {
			log.Println("üìå –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥")
			break
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
		var canScrollMore bool
		err = chromedp.EvaluateAsDevTools(`
			window.innerHeight + window.pageYOffset < document.body.scrollHeight - 100
		`, &canScrollMore).Do(ctx)
		
		if err != nil || !canScrollMore {
			log.Println("üìå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
			break
		}
	}
	
	*nodes = allNodes
	log.Printf("‚úÖ –ò—Ç–æ–≥: —Å–æ–±—Ä–∞–Ω–æ %d —Ç–æ–≤–∞—Ä–æ–≤", len(allNodes))
	return nil
}
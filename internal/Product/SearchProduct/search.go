package searchProduct

import (
	"context"
	"fmt"
	"log"
	"net/url"
	"strings"
	"time"

	"github.com/chromedp/chromedp"
)

func SearchProduct(keyword string) chromedp.Tasks {
	return chromedp.Tasks{
		chromedp.ActionFunc(func(ctx context.Context) error {
			// –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
			if err := diagnoseSearchPage(ctx); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: %v", err)
			}
			
			log.Printf("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫: %s", keyword)
			
			// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			time.Sleep(2 * time.Second)
			
			// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞
			strategies := []struct {
				name string
				fn   func(context.Context) error
			}{
				{"–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π input", func(ctx context.Context) error { return searchWithMainInput(ctx, keyword) }},
				{"–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É Enter", func(ctx context.Context) error { return searchWithEnter(ctx, keyword) }},
				{"–ü—Ä—è–º–æ–π URL", func(ctx context.Context) error { return searchWithDirectURL(ctx, keyword) }},
				{"–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é", func(ctx context.Context) error { return searchWithSuggestionClick(ctx, keyword) }},
			}
			
			for i, strategy := range strategies {
				log.Printf("–ü–æ–ø—ã—Ç–∫–∞ #%d: %s", i+1, strategy.name)
				if err := strategy.fn(ctx); err == nil {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∏—Å–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
					if isSearchSuccessful(ctx) {
						log.Printf("‚úÖ %s —É—Å–ø–µ—à–µ–Ω", strategy.name)
						return nil
					} else {
						log.Printf("‚ö†Ô∏è %s –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å", strategy.name)
					}
				} else {
					log.Printf("‚ùå %s –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: %v", strategy.name, err)
				}
				time.Sleep(1 * time.Second)
			}
			
			return fmt.Errorf("–≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
		}),
		
		// –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
		chromedp.ActionFunc(func(ctx context.Context) error {
			return waitForSearchResults(ctx)
		}),
	}
}

func diagnoseSearchPage(ctx context.Context) error {
	log.Println("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ò–°–ö–û–í–û–ô –°–¢–†–ê–ù–ò–¶–´ ===")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
	var currentURL string
	if err := chromedp.Evaluate("window.location.href", &currentURL).Do(ctx); err == nil {
		log.Printf("URL: %s", currentURL)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
	searchSelectors := []string{
		`#searchInput`,
		`.search-catalog__input`,
		`input[placeholder*="–ø–æ–∏—Å–∫"]`,
		`input[placeholder*="–Ω–∞–π–¥–∏"]`,
	}
	
	for _, selector := range searchSelectors {
		var exists bool
		if err := chromedp.Evaluate(fmt.Sprintf(`!!document.querySelector("%s")`, selector), &exists).Do(ctx); err == nil && exists {
			log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞: %s", selector)
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
			var disabled bool
			chromedp.Evaluate(fmt.Sprintf(`document.querySelector("%s").disabled`, selector), &disabled).Do(ctx)
			if !disabled {
				log.Printf("   ‚úÖ –≠–ª–µ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–≤–æ–¥–∞")
			} else {
				log.Printf("   ‚ùå –≠–ª–µ–º–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
			}
		}
	}
	
	log.Println("=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===")
	return nil
}

func searchWithMainInput(ctx context.Context, keyword string) error {
	searchInputSelectors := []string{
		`#searchInput`,
		`.search-catalog__input`,
		`input[placeholder*="–ø–æ–∏—Å–∫"]`,
		`input[placeholder*="–Ω–∞–π–¥–∏"]`,
		`.search__input`,
	}
	
	searchButtonSelectors := []string{
		`#applySearchBtn`,
		`.search-catalog__btn`,
		`button[type="submit"]`,
		`.search-btn`,
		`.header__search-submit`,
	}
	
	for _, inputSel := range searchInputSelectors {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
		var inputExists bool
		if err := chromedp.Evaluate(fmt.Sprintf(`!!document.querySelector("%s")`, inputSel), &inputExists).Do(ctx); err != nil || !inputExists {
			continue
		}
		
		log.Printf("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞: %s", inputSel)
		
		// –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
		if err := chromedp.Run(ctx,
			chromedp.Focus(inputSel, chromedp.ByQuery),
			chromedp.SetValue(inputSel, "", chromedp.ByQuery),
		); err != nil {
			continue
		}
		
		// –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
		if err := chromedp.Run(ctx,
			chromedp.SendKeys(inputSel, keyword, chromedp.ByQuery),
			chromedp.Sleep(500*time.Millisecond),
		); err != nil {
			return err
		}
		
		// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
		for _, btnSel := range searchButtonSelectors {
			if err := chromedp.Run(ctx,
				chromedp.WaitVisible(btnSel, chromedp.ByQuery),
				chromedp.Click(btnSel, chromedp.ByQuery),
			); err == nil {
				log.Printf("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞: %s", btnSel)
				return nil
			}
		}
		
		// –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
		if err := chromedp.Run(ctx,
			chromedp.Submit(inputSel, chromedp.ByQuery),
		); err == nil {
			log.Println("–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ submit")
			return nil
		}
	}
	
	return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ input")
}

func searchWithEnter(ctx context.Context, keyword string) error {
    searchInputSelectors := []string{
        `#searchInput`,
        `.search-catalog__input`,
        `input[placeholder*="–ø–æ–∏—Å–∫"]`,
        `input[name="search"]`,
    }
    
    for _, inputSel := range searchInputSelectors {
        log.Printf("–ü—Ä–æ–±—É–µ–º Enter –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ: %s", inputSel)
        
        err := chromedp.Run(ctx,
            // –ñ–¥–µ–º –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            chromedp.WaitVisible(inputSel, chromedp.ByQuery),
            chromedp.Focus(inputSel, chromedp.ByQuery),
            chromedp.Sleep(100*time.Millisecond),
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            chromedp.Evaluate(fmt.Sprintf(`document.querySelector("%s").value = ""`, inputSel), nil),
            chromedp.Sleep(100*time.Millisecond),
            
            // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            chromedp.SendKeys(inputSel, keyword, chromedp.ByQuery),
            chromedp.Sleep(500*time.Millisecond),
            
            // –°–ü–û–°–û–ë 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Enter —á–µ—Ä–µ–∑ chromedp.SendKeys
            chromedp.SendKeys(inputSel, "\n", chromedp.ByQuery),
            
            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            chromedp.Sleep(1*time.Second),
        )
        
        if err == nil {
            log.Printf("‚úÖ Enter –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ SendKeys —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: %s", inputSel)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ –ø–æ–∏—Å–∫
            if isSearchSuccessful(ctx) {
                return nil
            }
        }
        
        log.Printf("‚ùå SendKeys Enter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Å %s: %v", inputSel, err)
        
        // –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º JavaScript —Å–æ–±—ã—Ç–∏—è
        err = chromedp.Run(ctx,
            chromedp.Focus(inputSel, chromedp.ByQuery),
            chromedp.Sleep(100*time.Millisecond),
            
            // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞
            chromedp.Evaluate(fmt.Sprintf(`document.querySelector("%s").value = "%s"`, inputSel, keyword), nil),
            chromedp.Sleep(500*time.Millisecond),
            
            // –°–ü–û–°–û–ë 2: JavaScript —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            chromedp.Evaluate(fmt.Sprintf(`
                (function() {
                    var input = document.querySelector("%s");
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π Enter
                    var events = [
                        new KeyboardEvent('keydown', {
                            key: 'Enter',
                            code: 'Enter',
                            keyCode: 13,
                            which: 13,
                            bubbles: true,
                            cancelable: true
                        }),
                        new KeyboardEvent('keypress', {
                            key: 'Enter',
                            code: 'Enter',
                            keyCode: 13,
                            which: 13,
                            bubbles: true,
                            cancelable: true
                        }),
                        new KeyboardEvent('keyup', {
                            key: 'Enter',
                            code: 'Enter',
                            keyCode: 13,
                            which: 13,
                            bubbles: true,
                            cancelable: true
                        })
                    ];
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
                    events.forEach(function(event) {
                        input.dispatchEvent(event);
                    });
                    
                    // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
                    var form = input.closest('form');
                    if (form) {
                        var submitEvent = new Event('submit', { bubbles: true });
                        form.dispatchEvent(submitEvent);
                    }
                    
                    return true;
                })()
            `, inputSel), nil),
            
            chromedp.Sleep(1*time.Second),
        )
        
        if err == nil {
            log.Printf("‚úÖ Enter –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ JavaScript —Å–æ–±—ã—Ç–∏—è —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: %s", inputSel)
            
            if isSearchSuccessful(ctx) {
                return nil
            }
        }
        
        log.Printf("‚ùå JavaScript Enter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Å %s: %v", inputSel, err)
        
        // –°–ü–û–°–û–ë 3: –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        err = chromedp.Run(ctx,
            chromedp.Focus(inputSel, chromedp.ByQuery),
            chromedp.Sleep(100*time.Millisecond),
            
            // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            chromedp.Evaluate(fmt.Sprintf(`document.querySelector("%s").value = "%s"`, inputSel, keyword), nil),
            chromedp.Sleep(500*time.Millisecond),
            
            // –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
            chromedp.Click(`#applySearchBtn, .search-catalog__btn, button[type="submit"]`, chromedp.ByQuery),
            chromedp.Sleep(1*time.Second),
        )
        
        if err == nil {
            log.Printf("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤: %s", inputSel)
            
            if isSearchSuccessful(ctx) {
                return nil
            }
        }
    }
    
    return fmt.Errorf("–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Enter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∏ —Å –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º")
}

func searchWithDirectURL(ctx context.Context, keyword string) error {
	searchURL := fmt.Sprintf("https://www.wildberries.ru/catalog/0/search.aspx?search=%s", url.QueryEscape(keyword))
	log.Printf("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ –ø—Ä—è–º–æ–º—É URL: %s", searchURL)
	return chromedp.Navigate(searchURL).Do(ctx)
}

func searchWithSuggestionClick(ctx context.Context, keyword string) error {
	searchInputSelectors := []string{
		`#searchInput`,
		`.search-catalog__input`,
	}
	
	for _, inputSel := range searchInputSelectors {
		if err := chromedp.Run(ctx,
			chromedp.WaitVisible(inputSel, chromedp.ByQuery),
			chromedp.SetValue(inputSel, "", chromedp.ByQuery),
			chromedp.SendKeys(inputSel, keyword, chromedp.ByQuery),
			chromedp.Sleep(1*time.Second),
		); err != nil {
			continue
		}
		
		// –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –ø–µ—Ä–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–µ
		suggestionSelectors := []string{
			`.search-suggest__item`,
			`.suggest-item`,
			`.search-suggestion`,
			`[data-suggest-item]`,
		}
		
		for _, suggestionSel := range suggestionSelectors {
			if err := chromedp.Run(ctx,
				chromedp.WaitVisible(suggestionSel, chromedp.ByQuery),
				chromedp.Click(suggestionSel, chromedp.ByQuery),
			); err == nil {
				log.Printf("–ö–ª–∏–∫ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ: %s", suggestionSel)
				return nil
			}
		}
	}
	
	return fmt.Errorf("–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
}

func isSearchSuccessful(ctx context.Context) bool {
	successIndicators := []string{
		`.searching-results`,
		`[data-tag="searchResults"]`,
		`.catalog-page`,
		`.goods-list`,
		`.product-card`,
	}
	
	for _, indicator := range successIndicators {
		var exists bool
		if err := chromedp.Evaluate(fmt.Sprintf(`!!document.querySelector("%s")`, indicator), &exists).Do(ctx); err == nil && exists {
			return true
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
	var currentURL string
	if err := chromedp.Evaluate("window.location.href", &currentURL).Do(ctx); err == nil {
		if strings.Contains(currentURL, "search") || strings.Contains(currentURL, "Search") {
			return true
		}
	}
	
	return false
}

func waitForSearchResults(ctx context.Context) error {
	log.Println("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...")
	
	timeout := time.After(15 * time.Second)
	ticker := time.NewTicker(2 * time.Second)
	defer ticker.Stop()
	
	for {
		select {
		case <-timeout:
			return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
		case <-ticker.C:
			if isSearchSuccessful(ctx) {
				log.Println("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
				return nil
			}
			log.Println("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
		}
	}
}